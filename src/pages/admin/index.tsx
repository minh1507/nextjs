import Head from "next/head";
import Link from "next/link";

import styles from "@/styles/Home.module.scss";

import { cat } from "../../models/cat.interface";
import { Inter } from "next/font/google";
import Image from "next/legacy/image";

import { CreateCat, GetCat, DelCat } from "@/services/cat.service";
import { useState } from "react";
import { toast } from "react-toastify";

import useAxiosAuth from "@/common/hook/useAxiosAuth";
import useAxiosFormData from "@/common/hook/useAxiosAuthFormData";
import { wrapper } from "@/store/index";
import { addCat } from "@/store/cat/action";
import { useSelector, useDispatch } from "react-redux";

const inter = Inter({ subsets: ["latin"] });

interface HomeProps {
  posts: cat[];
}

export default function Home({ ...HomeProps }: HomeProps) {
  const [init, setInit] = useState(HomeProps.posts);
  const axiosAuth = useAxiosAuth();
  const axiosFormData = useAxiosFormData();
  const dispatch = useDispatch();
  const [input, setInput] = useState({
    name: "",
    age: "",
    fileUrl: "",
    fileName: "",
  });
  const [file, setFile] = useState("Chọn ảnh");
 
  const cats = useSelector((state:any) => state.cats.cats);

  // console.log(cats)
  const change_input = (e: any, name: string) => {
    setInput({
      ...input,
      [name]: e.target.value,
    });
  };

  const submit = async () => {
    if (validation()) {
      var formData: any = new FormData();

      formData.append("files", input.fileUrl);
      formData.append("name", input.name);
      formData.append("age", input.age);
      formData.append("fileName", input.fileName);

      let response = await axiosFormData.post("http://localhost:4000/api/cat", formData);
  
      if (response.data) {
        setInput({ name: "", age: "", fileUrl: "", fileName: "" });
        setFile("Chọn ảnh");
        await reload();
      }
    }
  };

  const base64 = (file: any) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject(error);
    });
  };

  const validation = () => {
    if (!input.name) {
      toast.info("Invalid name");
      return false;
    }
    if (!input.age) {
      toast.info("Invalid age");
      return false;
    }
    if (!input.fileUrl) {
      toast.info("Invalid file");
      return false;
    }
    return true;
  };

  const changeFile = async (e: any) => {
    try {
      switch (e.target.name) {
        case "fileName":
          // if (e.target.files[0].type == "image/png") {
            setInput({
              ...input,
              ["fileUrl"]: e.target.files[0],
              ["fileName"]: e.target.files[0].name,
            });
            let filetext = await base64(e.target.files[0]);
            setFile(filetext as string);
          // } else {
          //   toast.info("File must be png");
          // }

          break;

        default:
          toast.info("No file chosen");
      }
    } catch (error) {
      toast.error("File chose error:" + error);
    }
  };

  const reload = async () => {
    let response = await GetCat();
    dispatch(addCat(response.data));
  };

  const del = async (id: number) => {
    let response = await axiosAuth.delete(
      `http://localhost:4000/api/cat/${id}`
    );
    if (response.data) {
      toast.success("Delete successfully");
      await reload();
    }
  };
  return (
    <>
      <Head>
        <title>hello</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <section className={styles.card}>
          <section>
            <h1>Thông tin</h1>
            <div>
              <label>Tên</label>
              <input
                placeholder="Nhập tên ..."
                type="text"
                value={input.name}
                onChange={(e) => {
                  change_input(e, "name");
                }}
              />
            </div>
            <div>
              <label>Tuổi</label>
              <input
                placeholder="Nhập tuổi ..."
                type="text"
                value={input.age}
                onChange={(e) => {
                  change_input(e, "age");
                }}
              />
            </div>
            <div>
              <label>Ảnh</label>

              <div className={styles.files}>
                <input
                  type="file"
                  name="fileName"
                  onChange={(e) => {
                    changeFile(e);
                  }}
                />
                <div className={"active"}>
                  {!input.fileUrl ? (
                    file
                  ) : (
                    <Image
                      objectFit="contain"
                      layout="fill"
                      unoptimized
                      src={file}
                      alt="loading ..."
                    />
                  )}
                </div>
              </div>
            </div>
            <button
              onClick={() => {
                submit();
              }}
            >
              Lưu
            </button>
          </section>
          {cats.length > 0 && (
            <ul>
              {cats.map((post: any) => {
                return (
                  <li className={styles.card_element} key={post.id}>
                    {post.name}{" "}
                    <section>
                      <i
                        className="bi bi-trash"
                        onClick={() => {
                          del(post.id);
                        }}
                      ></i>
                      <Link href={`/admin/${post.id}`}>
                        <i className="bi bi-box-arrow-in-right"></i>
                      </Link>
                    </section>
                  </li>
                );
              })}
            </ul>
          )}
        </section>
      </main>
      <style jsx>{`
        .active {
          display: flex;
          justify-content: center;
          align-items: center;
          width: 100%;
          height: ${!input.fileUrl ? "35px" : "100px"};
        }
      `}</style>
    </>
  );
}

export const getStaticProps = wrapper.getStaticProps((store:any) => async () => {
  const response = await GetCat();
  store.dispatch(addCat(response.data));
  return {
    props: {
      // posts: response.data,
    },
  };
})
