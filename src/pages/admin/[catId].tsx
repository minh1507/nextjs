import Head from "next/head";

import styles from "@/styles/Detail.module.scss";

import { Inter } from "next/font/google";
import { GetById, GetPath } from "@/services/cat.service";
import { cat } from "@/models/cat.interface";
import { useState } from "react";

import Link from "next/link";

import Image from "next/legacy/image";

const inter = Inter({ subsets: ["vietnamese"] });

interface DetailProps {
  posts: cat;
}

export default function Detail({ ...DetailProps }: DetailProps) {
  const [init, setInit] = useState(DetailProps.posts);

  return (
    <>
      <Head>
        <title>Detail Cat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {init && (
          <>
            <section>
              {init.name && init.age && (
                <section className={styles.detail}>
                  <h5>Name: {init.name}</h5>
                  <p>Age: {init.age}</p>
                  <div className={styles.itemdetail}>
                    <Image
                      src={"http://localhost:4000" + init.fileUrl}
                      alt="Loading ..."
                      layout={"fill"}
                      unoptimized
                    />
                  </div>
                </section>
              )}
            </section>

            <Link href={`/admin`} className={styles.detailBottom}>
              <button>Quay láº¡i</button>
            </Link>
          </>
        )}
      </main>
    </>
  );
}

export async function getStaticPaths() {
  const response = await GetPath();
  let data = response.data;

  const paths = data.map((post: any) => {
    return {
      params: { catId: `${post.id}` },
    };
  });

  return {
    paths: paths,
    fallback: true,
  };
}

export async function getStaticProps({ params }: any) {
  const response = await GetById(params.catId);

  if (!response.data) {
    return {
      notFound: true,
    };
  } else {
    return {
      props: {
        posts: response.data,
      },
    };
  }
}
